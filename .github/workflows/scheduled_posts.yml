name: Scheduled Daily Posts

on:
  schedule:
    # Schedule posts at 1-hour intervals for 15‚Äì20 posts/day (every hour from 4:30 to 23:30 UTC)
    - cron: '30 4 * * *'   # 10:00 AM IST
    - cron: '30 5 * * *'   # 11:00 AM IST
    - cron: '30 6 * * *'   # 12:00 PM IST
    - cron: '30 7 * * *'   # 1:00 PM IST
    - cron: '30 8 * * *'   # 2:00 PM IST
    - cron: '30 9 * * *'   # 3:00 PM IST
    - cron: '30 10 * * *'  # 4:00 PM IST
    - cron: '30 11 * * *'  # 5:00 PM IST
    - cron: '30 12 * * *'  # 6:00 PM IST
    - cron: '30 13 * * *'  # 7:00 PM IST
    - cron: '30 14 * * *'  # 8:00 PM IST
    - cron: '30 15 * * *'  # 9:00 PM IST
    - cron: '30 16 * * *'  # 10:00 PM IST
    - cron: '30 17 * * *'  # 11:00 PM IST
    - cron: '30 18 * * *'  # 12:00 AM IST
    - cron: '30 19 * * *'  # 1:00 AM IST
    - cron: '30 20 * * *'  # 2:00 AM IST
    - cron: '30 21 * * *'  # 3:00 AM IST
    - cron: '30 22 * * *'  # 4:00 AM IST
    - cron: '30 23 * * *'  # 5:00 AM IST
  workflow_dispatch:

jobs:
  daily-post:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tweepy requests openai
          if [ -f deploy_requirements.txt ]; then pip install -r deploy_requirements.txt; fi

      - name: Download NLTK data
        run: |
          python -c "
          try:
              import nltk
              nltk.download('punkt', quiet=True)
              nltk.download('vader_lexicon', quiet=True)
              print('NLTK data downloaded successfully')
          except Exception as e:
              print(f'NLTK download failed: {e}')
          "

      - name: Generate and post hourly content
        env:
          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
          TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python -c "
import tweepy
import random
import os
import requests
from datetime import datetime, timezone
import json

# Validate environment variables
required_vars = ['TWITTER_CONSUMER_KEY', 'TWITTER_CONSUMER_SECRET', 'TWITTER_ACCESS_TOKEN', 'TWITTER_ACCESS_TOKEN_SECRET']
missing_vars = [var for var in required_vars if not os.getenv(var)]

if missing_vars:
    print(f'‚ùå Missing environment variables: {missing_vars}')
    exit(1)

print('‚úÖ All environment variables loaded')

# Initialize Twitter client
try:
    client = tweepy.Client(
        consumer_key=os.getenv('TWITTER_CONSUMER_KEY'),
        consumer_secret=os.getenv('TWITTER_CONSUMER_SECRET'),
        access_token=os.getenv('TWITTER_ACCESS_TOKEN'),
        access_token_secret=os.getenv('TWITTER_ACCESS_TOKEN_SECRET'),
        bearer_token=os.getenv('TWITTER_BEARER_TOKEN')
    )
    print('‚úÖ Twitter client initialized')
except Exception as e:
    print(f'‚ùå Twitter client initialization failed: {e}')
    exit(1)

# Determine content type based on hour
current_hour = datetime.now(timezone.utc).hour
ist_hour = (current_hour + 5) % 24 + 1  # Convert to IST roughly

# Content distribution throughout the day
content_schedule = {
    10: 'tech_news',    # 10 AM IST
    11: 'humor',        # 11 AM IST  
    12: 'tech_news',    # 12 PM IST
    13: 'opportunities', # 1 PM IST
    14: 'humor',        # 2 PM IST
    15: 'funding',      # 3 PM IST
    16: 'tech_news',    # 4 PM IST
    17: 'humor',        # 5 PM IST
    18: 'opportunities', # 6 PM IST
    19: 'tech_news',    # 7 PM IST
    20: 'humor',        # 8 PM IST
    21: 'funding',      # 9 PM IST
    22: 'tech_news',    # 10 PM IST
    23: 'humor',        # 11 PM IST
    0: 'opportunities', # 12 AM IST
    1: 'humor',         # 1 AM IST
    2: 'tech_news',     # 2 AM IST
    3: 'funding',       # 3 AM IST
    4: 'humor',         # 4 AM IST
    5: 'tech_news'      # 5 AM IST
}

content_type = content_schedule.get(ist_hour, 'humor')
print(f'üïê Current IST hour: {ist_hour}, Content type: {content_type}')

# Generate content based on type
def generate_content(content_type):
    if content_type == 'tech_news':
        openers = [
            'I read a lot and just came across',
            'I surf through websites a lot and discovered',
            'Just saw this and my mind is blown',
            'Breaking news that caught my attention'
        ]
        companies = ['Nvidia', 'Tesla', 'Google', 'Meta', 'OpenAI', 'Microsoft', 'Amazon']
        topics = ['AI chips', 'autonomous driving', 'new AI model', 'product launch', 'research breakthrough']
        
        opener = random.choice(openers)
        company = random.choice(companies)
        topic = random.choice(topics)
        
        content = f'{opener}: {company} just announced major {topic} developments üöÄ\\n\\nThis could change everything for the tech industry!\\n\\n#{company} #TechNews #AI #Innovation #Technology'
        
    elif content_type == 'funding':
        openers = [
            'I surf through funding news and wow',
            'VCs are going crazy for',
            'Another day, another AI startup raising',
            'Just saw this funding round and'
        ]
        startups = ['Scale AI', 'Hugging Face', 'Runway', 'Perplexity AI', 'Anthropic']
        amounts = ['$50M', '$100M', '$200M', '$500M', '$1B']
        
        opener = random.choice(openers)
        startup = random.choice(startups)
        amount = random.choice(amounts)
        
        content = f'{opener} - {startup} just raised {amount}! üí∞\\n\\nThey\\'re building the future of AI and VCs are betting big.\\n\\nThe AI revolution is just getting started ü§ñ\\n\\n#StartupFunding #{startup.replace(\" \", \"\")} #AI #VentureCapital #Innovation'
        
    elif content_type == 'opportunities':
        openers = [
            'HALLELUJAH coders! JP Morgan just dropped a hackathon',
            'DEVMINDS! Devpost is here with another hackathon',
            'Imagine being an intern at',
            'About time you utilize those skills out of your closet'
        ]
        companies = ['Google', 'Meta', 'OpenAI', 'Nvidia', 'Tesla', 'Microsoft']
        opportunities = ['hackathon with $50K prize', 'summer internship program', 'fellowship opportunity', 'coding challenge']
        
        opener = random.choice(openers)
        company = random.choice(companies)
        opportunity = random.choice(opportunities)
        
        if 'hackathon' in opener:
            content = f'{opener} with amazing prize money üí∞\\n\\nTime to dust off those algorithms and show what you\\'re made of!\\n\\nDeadline approaching fast - don\\'t sleep on this! üöÄ\\n\\n#Hackathon #Coding #TechJobs #Programming #DevChallenge'
        else:
            content = f'{opener} {company} for their {opportunity}! üéØ\\n\\nThis could be your big break into tech.\\n\\nApply now before it\\'s too late! üëá\\n\\n#{company} #TechJobs #Internship #Opportunities #TechCareers'
            
    else:  # humor
        humor_topics = [
            'debugging CSS',
            'explaining AI to non-tech people', 
            'code reviews',
            'production bugs',
            'work from home',
            'git commits',
            'stack overflow',
            'imposter syndrome'
        ]
        
        topic = random.choice(humor_topics)
        
        if topic == 'debugging CSS':
            content = 'Me: I\\'ll just quickly fix this CSS\\n\\nAlso me, 4 hours later: Why is everything purple and floating? üü£‚ú®\\n\\n#CSS #WebDev #TechHumor #DeveloperLife #Programming'
        elif topic == 'explaining AI to non-tech people':
            content = 'Explaining my AI job to relatives:\\n\\nMe: I teach computers to think\\nThem: So you fix printers?\\nMe: *internal screaming* üñ®Ô∏èüò≠\\n\\n#AI #TechLife #Relatable #MachineLearning #TechHumor'
        elif topic == 'production bugs':
            content = 'That moment when your code works perfectly in development but breaks everything in production üí•\\n\\n\"It works on my machine\" - famous last words\\n\\n#Programming #DevLife #TechHumor #SoftwareDevelopment #Debugging'
        else:
            content = f'Developer life: spending 2 hours on {topic} and realizing the solution was in the first Stack Overflow answer ü§¶‚Äç‚ôÇÔ∏è\\n\\n#Programming #TechHumor #DeveloperLife #StackOverflow #Coding'
    
    return content

# Generate the content
try:
    final_content = generate_content(content_type)
    print(f'üìù Generated content ({len(final_content)} chars): {final_content[:100]}...')
    
    # Ensure content is under 280 characters
    if len(final_content) > 280:
        print(f'‚ö†Ô∏è Content too long ({len(final_content)} chars), truncating...')
        final_content = final_content[:277] + '...'
    
    # Initialize sentiment analyzer if available
    try:
        from bot.sentiment_analyzer import SentimentAnalyzer
        sentiment_analyzer = SentimentAnalyzer()
        sentiment_result = sentiment_analyzer.analyze_sentiment(final_content)
        print(f'Sentiment: {sentiment_result[\"sentiment\"]} (confidence: {sentiment_result[\"confidence\"]:.3f})')
        
        # Skip posting if very negative
        if sentiment_result['sentiment'] == 'negative' and sentiment_result['confidence'] > 0.7:
            print('‚ö†Ô∏è Skipping post due to high negative sentiment')
            exit(0)
    except ImportError:
        print('‚ö†Ô∏è Sentiment analyzer not available, proceeding without sentiment check')
    
    # Post to Twitter
    response = client.create_tweet(text=final_content)
    tweet_id = response.data['id']
    
    print(f'‚úÖ Tweet posted successfully!')
    print(f'üîó Tweet ID: {tweet_id}')
    print(f'üìä Content type: {content_type}')
    print(f'üåê URL: https://twitter.com/i/web/status/{tweet_id}')
    
except Exception as e:
    print(f'‚ùå Error: {e}')
    
    # Fallback content if generation fails
    fallback_content = f'Building the future with code, one commit at a time üöÄ\\n\\nThe tech world never sleeps and neither do we!\\n\\n#TechLife #Programming #Innovation #AI #Future'
    
    try:
        response = client.create_tweet(text=fallback_content)
        tweet_id = response.data['id']
        print(f'‚úÖ Fallback tweet posted: {tweet_id}')
    except Exception as fallback_error:
        print(f'‚ùå Fallback also failed: {fallback_error}')
        exit(1)
"
