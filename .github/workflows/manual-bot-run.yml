name: Manual Fallback AI Tweet Post

on:
  workflow_dispatch:
    inputs:
      tweet_prompt:
        description: 'Enter keyword/topic (e.g., “AGI”)'
        required: true
        type: string
      post_choices:
        description: 'Enter tweet numbers to post (e.g., 1,3,5). Leave blank to only generate.'
        required: false
        default: ''
        type: string

jobs:
  ai-tweet:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install -r deploy_requirements.txt

      - name: Generate 5 Tweets
        env:
          PROMPT: |
            You are a witty, up-to-date social media creator for X.com.
            I will give you a topic or keyword.

            Your task is to:
            1. Simulate searching Google News, Hacker News, X.com Trends, and TechCrunch.
            2. Generate 5 distinct, scroll-stopping tweet options for the given topic.
            3. Use a variety of tones: insightful, funny, sarcastic, trending, and informative.

            Each tweet should:
            - Be ≤280 characters
            - Be 4–6 sentences when possible
            - Include 2 smart hashtags
            - Sound human, not robotic
            - (Optional) Include meme or image idea

            Format exactly like this:

            ---
            Tweet 1:
            format it like 
            ___ ____
            __ (content)


            #hashtag #hashtag
            
            [text]
            or humourous post like this
            A:
            B:
            A:

            #hashtags
            Image suggestion: [desc]

            Tweet 2:
            ...
            ---

            Topic: ${{ inputs.tweet_prompt }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python generate_fallback_tweet.py  # Output 5 tweets to generated_tweets.txt

      - name: Display and Post Selected Tweets
        if: ${{ inputs.post_choices != '' }}
        env:
          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
          TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
          POST_CHOICES: ${{ inputs.post_choices }}
        run: |
          python -c "
import tweepy, os, re
from bot.sentiment_analyzer import SentimentAnalyzer
from config.settings import get_api_credentials

choices = os.getenv('POST_CHOICES').replace(' ', '').split(',')
selected = set(int(c) for c in choices if c.isdigit())

with open('generated_tweets.txt', 'r') as f:
    content = f.read()

blocks = re.findall(r'Tweet (\d+):\n(.+?)\n\n#(.*?)\nImage suggestion: (.*?)\n+', content, re.DOTALL)

if not blocks:
    print('❌ No tweet blocks found in generated_tweets.txt')
    exit(1)

credentials = get_api_credentials()
client = tweepy.Client(
    consumer_key=credentials['consumer_key'],
    consumer_secret=credentials['consumer_secret'],
    access_token=credentials['access_token'],
    access_token_secret=credentials['access_token_secret']
)

sentiment_analyzer = SentimentAnalyzer()

for tweet_num, text, hashtags, image in blocks:
    if int(tweet_num) not in selected:
        continue

    tweet = f\"\"\"{text.strip()}

#{hashtags.strip()}\"\"\"

    if len(tweet) > 280:
        print(f\"⛔ Skipping Tweet {tweet_num}: exceeds character limit ({len(tweet)} characters).\")
        continue

    sentiment = sentiment_analyzer.analyze_sentiment(tweet)
    print(f\"Tweet {tweet_num}: {tweet}\")
    print(f\"Sentiment: {sentiment['sentiment']} (confidence: {sentiment['confidence']:.3f})\")

    if sentiment['sentiment'] == 'negative' and sentiment['confidence'] > 0.5:
        print(f\"⚠️ Not posting Tweet {tweet_num} due to negative sentiment.\")
        continue

    try:
        response = client.create_tweet(text=tweet)
        tweet_id = response.data['id']
        print(f\"✅ Tweet {tweet_num} posted: https://twitter.com/i/web/status/{tweet_id}\")
    except Exception as e:
        print(f\"❌ Error posting Tweet {tweet_num}: {e}\")
"
