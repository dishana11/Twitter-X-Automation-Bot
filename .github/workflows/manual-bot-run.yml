name: Manual Fallback AI Tweet Post

on:
  workflow_dispatch:
    inputs:
      tweet_prompt:
        description: 'Describe the topic or keyword for your tweet(s)‚Äîe.g., ‚ÄúGenerative AI‚Äù'
        required: true
        type: string
      force_post:
        description: 'Force post even if sentiment is not positive'
        required: false
        default: false
        type: boolean

jobs:
  ai-tweet:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install -r deploy_requirements.txt

      - name: Generate Tweet with Fallback AI
        env:
          PROMPT: |
            You are a witty, up-to-date social media content writer for a personal brand in tech.
            When I give you a keyword or topic (see below), do the following:

            1. Search or simulate searching recent, credible sources (like Hacker News, X.com trends, TechCrunch, Google News) for the latest insights, trends, memes, or updates related to that keyword.
            2. Generate 1‚Äì2 engaging posts suitable for X.com (formerly Twitter).

            Each post should:
            - Sound like a real human wrote it (fun, insightful, occasionally sarcastic)
            - Be timely, relatable, and scroll-stopping
            - Be longer than a typical tweet (aim for 4‚Äì6 sentences)
            - Include 3‚Äì6 relevant hashtags
            - Optionally suggest a meme idea or image type (if it fits the topic)
            - If humor works well with that topic, make one post humorous

            Each post should be in the format below:

            [Post Text]

            #hashtag1 #hashtag2 #hashtag3
            [Image suggestion, if any]

            Topic: ${{ inputs.tweet_prompt }}

            Example Input:
            User input: Generative AI

            Example Output:
            Post 1 (Insightful):

            Generative AI isn't just drawing pretty faces anymore.
            It's writing legal drafts, coding apps, and designing molecules.
            We‚Äôre not replacing humans.
            We‚Äôre just forcing them to upskill at light speed. ‚ö°

            #GenerativeAI #FutureOfWork #AItools #TechTrends #OpenAI #AI

            Image suggestion: Side-by-side comparison of a human and an AI-generated app or image.

            Post 2 (Humorous):

            Boss: ‚ÄúCan you write the report by EOD?‚Äù
            Me: ‚ÄúAlready done.‚Äù
            Also me, just pasted the prompt into ChatGPT.

            Generative AI got me on auto-pilot üöÄ

            #GenAI #WorkLife #AIMemes #ProductivityHack #RelatableTech

            Image suggestion: A meme of SpongeBob rapidly typing with a glowing laptop.
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_SAMAPI_KEY: ${{ secrets.OPENAI_SAMAPI_KEY }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          python generate_fallback_tweet.py

      - name: Post Tweet
        env:
          TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
          TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
          TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
          FORCE_POST: ${{ inputs.force_post }}
        run: |
          TWEET_CONTENT=$(cat generated_tweet.txt)
          python -c "
import tweepy, os
from bot.sentiment_analyzer import SentimentAnalyzer
from config.settings import get_api_credentials

sentiment_analyzer = SentimentAnalyzer()
credentials = get_api_credentials()
client = tweepy.Client(
    consumer_key=credentials['consumer_key'],
    consumer_secret=credentials['consumer_secret'],
    access_token=credentials['access_token'],
    access_token_secret=credentials['access_token_secret']
)
content = '''$TWEET_CONTENT'''
force = os.getenv('FORCE_POST', 'false').lower() == 'true'
sentiment_result = sentiment_analyzer.analyze_sentiment(content)
print(f'Content: {content}')
print(f'Sentiment: {sentiment_result[\"sentiment\"]} (confidence: {sentiment_result[\"confidence\"]:.3f})')
should_post = force or sentiment_result['sentiment'] != 'negative' or sentiment_result['confidence'] < 0.5
if should_post:
    try:
        response = client.create_tweet(text=content)
        tweet_id = response.data['id']
        print(f'Tweet posted successfully! ID: {tweet_id}')
        print(f'URL: https://twitter.com/i/web/status/{tweet_id}')
    except Exception as e:
        print(f'Failed to post: {e}')
        exit(1)
else:
    print('Tweet not posted due to negative sentiment. Use force_post=true to override.')
    exit(1)
"
